package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.server

import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.features.value.BoolValue
import net.ccbluex.liquidbounce.utils.InventoryUtils
import net.minecraft.init.Items
import net.minecraft.network.play.server.S07PacketRespawn
import net.minecraft.network.play.server.S08PacketPlayerPosLook


class HypixelDisabler : DisablerMode("HypixelMotion") {
    private val notWhenStarAvailable = BoolValue("NotWithStar", true)
    private var flags = 0
    private var airTicks = 0
    private var execute = false
    private var jump = false

    @EventTarget
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        when (packet) {
            is S07PacketRespawn -> {
                flags = 0
                execute = false
                jump = true
            }

            is S08PacketPlayerPosLook -> {
                if (++flags >= 20) {
                    execute = false
                    flags = 0
                }
            }
        }
    }

    @EventTarget
    override fun onJump(event: JumpEvent) {
        if (event.eventState == EventState.POST) {
            if (!jump) return
            jump = false
            execute = true
        }
    }

    private val hasStar
        get() = InventoryUtils.findItem(36, 44, Items.nether_star)

    @EventTarget
    override fun onMotion(event: MotionEvent) {
        val player = mc.thePlayer ?: return

        if (event.eventState != EventState.PRE) return
        if (notWhenStarAvailable.get() && hasStar > -1) return

        // TODO: Add Warning Message

        when {
            player.onGround -> airTicks = 0
            else -> airTicks++
        }

        if (execute && airTicks >= 10) {
            if (airTicks % 2 == 0) {
                event.x += 0.095
            }
            player.setVelocity(0.0, 0.0, 0.0)
        }
    }

    @EventTarget
    override fun onUpdate(event: UpdateEvent) {
        val player = mc.thePlayer ?: return
        if (jump && !mc.gameSettings.keyBindJump.isKeyDown) {
            player.jump()
        }
    }
}
